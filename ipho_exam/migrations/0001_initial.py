# Generated by Django 1.11.29 on 2020-10-23 16:44

import uuid

import django.db.models.deletion
import django.db.models.manager
from django.db import migrations, models

import ipho_exam.models
import ipho_exam.utils.natural_id


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("ipho_core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AttributeChange",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now=True, null=True)),
                (
                    "position",
                    models.IntegerField(
                        help_text="Question grouping position, e.g. 0 for cover sheet / instructions, 1 for the first question, etc"
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        help_text="Exam handouts",
                        upload_to=ipho_exam.models.exam_prints_filename,
                    ),
                ),
                (
                    "num_pages",
                    models.IntegerField(
                        default=0, help_text="Number of pages of the handouts"
                    ),
                ),
                (
                    "barcode_num_pages",
                    models.IntegerField(
                        default=0, help_text="Number of pages with a barcode"
                    ),
                ),
                (
                    "extra_num_pages",
                    models.IntegerField(
                        default=0,
                        help_text="Number of additional pages with barcode (not in the handouts)",
                    ),
                ),
                (
                    "barcode_base",
                    models.TextField(help_text="Common base barcode on all pages"),
                ),
                (
                    "scan_file",
                    models.FileField(
                        blank=True,
                        help_text="Scanned results. The file is show to the delegation and, if possible, it will contain only the pages with barcode.",
                        upload_to=ipho_exam.models.exam_scans_filename,
                    ),
                ),
                (
                    "scan_file_orig",
                    models.FileField(
                        blank=True,
                        help_text="Original scanned document without page extractions",
                        upload_to=ipho_exam.models.exam_scans_orig_filename,
                    ),
                ),
                (
                    "scan_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("S", "Success"),
                            ("W", "Warning"),
                            ("M", "Missing pages"),
                        ],
                        help_text="Status of the scanned document. S - Success, W - Warning, M - Missing pages",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "scan_msg",
                    models.TextField(
                        blank=True,
                        help_text="Warning messages generated by the barcode extractor",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DocumentTask",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("task_id", models.CharField(max_length=255, unique=True)),
                (
                    "document",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Document",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Exam",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=8)),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Exam is editable and viewable by delegations.",
                    ),
                ),
                (
                    "hidden",
                    models.BooleanField(
                        default=False,
                        help_text="Exam is hidden from everyone except superusers.",
                    ),
                ),
                (
                    "marking_active",
                    models.BooleanField(
                        default=False,
                        help_text="Allow marking submission from delegations. Activate only after official marks are entered.",
                    ),
                ),
                (
                    "moderation_active",
                    models.BooleanField(
                        default=False, help_text="Allow access to moderation interface."
                    ),
                ),
                (
                    "show_scans",
                    models.BooleanField(
                        default=False, help_text="Show successful scans to delegation."
                    ),
                ),
                (
                    "hide_feedback",
                    models.BooleanField(
                        default=False, help_text="Hide feedback from delegations"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExamAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("T", "Translation submission"),
                            ("P", "Points submission"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("O", "In progress"), ("S", "Submitted")],
                        default="O",
                        max_length=1,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now=True)),
                (
                    "delegation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exam_status",
                        to="ipho_core.Delegation",
                    ),
                ),
                (
                    "exam",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delegation_status",
                        to="ipho_exam.Exam",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("part", models.CharField(default=None, max_length=100)),
                ("comment", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("S", "Submitted"),
                            ("V", "Scheduled for voting"),
                            ("I", "Implemented"),
                            ("T", "Settled"),
                            ("R", "Rejected"),
                        ],
                        default="S",
                        max_length=1,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now=True)),
                (
                    "delegation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_core.Delegation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Figure",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                (
                    "fig_id",
                    models.URLField(
                        db_index=True,
                        default=ipho_exam.utils.natural_id.generate_id,
                        max_length=100,
                        unique=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                ("hidden", models.BooleanField(default=False)),
                ("hidden_from_submission", models.BooleanField(default=False)),
                ("versioned", models.BooleanField(default=False)),
                ("is_pdf", models.BooleanField(default=False)),
                (
                    "style",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("afrikaans", "Afrikaans"),
                            ("albanian", "Albanian"),
                            ("amharic", "Amharic"),
                            ("arabic", "Arabic"),
                            ("armenian", "Armenian"),
                            ("asturian", "Asturian"),
                            ("azerbaijani", "Azerbaijani"),
                            ("basque", "Basque"),
                            ("belarusian", "Belarusian"),
                            ("bengali", "Bengali"),
                            ("bosnian", "Bosnian"),
                            ("breton", "Breton"),
                            ("bulgarian", "Bulgarian"),
                            ("burmese", "Burmese"),
                            ("cantonese", "Cantonese"),
                            ("catalan", "Catalan"),
                            ("chinese", "Chinese (simplified)"),
                            ("chinese_tc", "Chinese (traditional)"),
                            ("coptic", "Coptic"),
                            ("croatian", "Croatian"),
                            ("czech", "Czech"),
                            ("danish", "Danish"),
                            ("divehi", "Divehi"),
                            ("dutch", "Dutch"),
                            ("english", "English"),
                            ("esperanto", "Esperanto"),
                            ("estonian", "Estonian"),
                            ("filipino", "Filipino"),
                            ("finnish", "Finnish"),
                            ("french", "French"),
                            ("friulian", "Friulian"),
                            ("galician", "Galician"),
                            ("georgian", "Georgian"),
                            ("german", "German"),
                            ("greek", "Greek"),
                            ("hebrew", "Hebrew"),
                            ("hindi", "Hindi"),
                            ("hungarian", "Hungarian"),
                            ("icelandic", "Icelandic"),
                            ("indonesian", "Indonesian"),
                            ("interlingua", "Interlingua"),
                            ("irish", "Irish"),
                            ("italian", "Italian"),
                            ("japanese", "Japanese"),
                            ("kannada", "Kannada"),
                            ("kazakh", "Kazakh"),
                            ("khmer", "Khmer"),
                            ("korean", "Korean"),
                            ("kurdish", "Kurdish"),
                            ("kyrgyz", "Kyrgyz"),
                            ("lao", "Lao"),
                            ("latin", "Latin"),
                            ("latvian", "Latvian"),
                            ("lithuanian", "Lithuanian"),
                            ("luxembourgish", "Luxembourgish"),
                            ("macedonian", "Macedonian"),
                            ("magyar", "Magyar"),
                            ("malay", "Malay"),
                            ("malayalam", "Malayalam"),
                            ("malaysian", "Malaysian"),
                            ("mandarin", "Mandarin"),
                            ("marathi", "Marathi"),
                            ("mongolian", "Mongolian"),
                            ("montenegrin", "Montenegrin"),
                            ("nepali", "Nepali"),
                            ("northern sotho", "Northern Sotho"),
                            ("norwegian bokmål", "Norwegian Bokmål"),
                            ("norwegian nynorsk", "Norwegian Nynorsk"),
                            ("occitan", "Occitan"),
                            ("persian", "Persian"),
                            ("piedmontese", "Piedmontese"),
                            ("polish", "Polish"),
                            ("portuguese", "Portuguese"),
                            ("romanian", "Romanian"),
                            ("romansh", "Romansh"),
                            ("russian", "Russian"),
                            ("sanskrit", "Sanskrit"),
                            ("scottish", "Scottish"),
                            ("serbian", "Serbian"),
                            ("sinhalese", "Sinhalese"),
                            ("slovak", "Slovak"),
                            ("slovenian", "Slovenian"),
                            ("southern ndebele", "Southern Ndebele"),
                            ("southern sotho", "Southern Sotho"),
                            ("spanish", "Spanish"),
                            ("swedish", "Swedish"),
                            ("syriac", "Syriac"),
                            ("tajik", "Tajik"),
                            ("tamil", "Tamil"),
                            ("telugu", "Telugu"),
                            ("thai", "Thai"),
                            ("tibetan", "Tibetan"),
                            ("tsonga", "Tsonga"),
                            ("tswana", "Tswana"),
                            ("turkish", "Turkish"),
                            ("turkmen", "Turkmen"),
                            ("ukrainian", "Ukrainian"),
                            ("urdu", "Urdu"),
                            ("uzbek", "Uzbek"),
                            ("venda", "Venda"),
                            ("vietnamese", "Vietnamese"),
                            ("welsh", "Welsh"),
                            ("xhosa", "Xhosa"),
                            ("zulu", "Zulu"),
                        ],
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("ltr", "Left-to-right"), ("rtl", "Right-to-left")],
                        default="ltr",
                        max_length=3,
                    ),
                ),
                (
                    "polyglossia",
                    models.CharField(
                        choices=[
                            ("albanian", "Albanian"),
                            ("amharic", "Amharic"),
                            ("arabic", "Arabic"),
                            ("armenian", "Armenian"),
                            ("asturian", "Asturian"),
                            ("bahasai", "Bahasai"),
                            ("bahasam", "Bahasam"),
                            ("basque", "Basque"),
                            ("bengali", "Bengali"),
                            ("brazilian", "Brazilian"),
                            ("breton", "Breton"),
                            ("bulgarian", "Bulgarian"),
                            ("catalan", "Catalan"),
                            ("coptic", "Coptic"),
                            ("croatian", "Croatian"),
                            ("czech", "Czech"),
                            ("danish", "Danish"),
                            ("divehi", "Divehi"),
                            ("dutch", "Dutch"),
                            ("english", "English"),
                            ("esperanto", "Esperanto"),
                            ("estonian", "Estonian"),
                            ("farsi", "Farsi"),
                            ("finnish", "Finnish"),
                            ("french", "French"),
                            ("friulan", "Friulan"),
                            ("galician", "Galician"),
                            ("german", "German"),
                            ("greek", "Greek"),
                            ("hebrew", "Hebrew"),
                            ("hindi", "Hindi"),
                            ("icelandic", "Icelandic"),
                            ("interlingua", "Interlingua"),
                            ("irish", "Irish"),
                            ("italian", "Italian"),
                            ("kannada", "Kannada"),
                            ("lao", "Lao"),
                            ("latin", "Latin"),
                            ("latvian", "Latvian"),
                            ("lithuanian", "Lithuanian"),
                            ("lsorbian", "Lsorbian"),
                            ("magyar", "Magyar"),
                            ("malayalam", "Malayalam"),
                            ("marathi", "Marathi"),
                            ("nko", "Nko"),
                            ("norsk", "Norsk"),
                            ("nynorsk", "Nynorsk"),
                            ("occitan", "Occitan"),
                            ("piedmontese", "Piedmontese"),
                            ("polish", "Polish"),
                            ("portuges", "Portuges"),
                            ("romanian", "Romanian"),
                            ("romansh", "Romansh"),
                            ("russian", "Russian"),
                            ("samin", "Samin"),
                            ("sanskrit", "Sanskrit"),
                            ("scottish", "Scottish"),
                            ("serbian", "Serbian"),
                            ("slovak", "Slovak"),
                            ("slovenian", "Slovenian"),
                            ("spanish", "Spanish"),
                            ("swedish", "Swedish"),
                            ("syriac", "Syriac"),
                            ("tamil", "Tamil"),
                            ("telugu", "Telugu"),
                            ("thai", "Thai"),
                            ("tibetan", "Tibetan"),
                            ("turkish", "Turkish"),
                            ("turkmen", "Turkmen"),
                            ("ukrainian", "Ukrainian"),
                            ("urdu", "Urdu"),
                            ("usorbian", "Usorbian"),
                            ("vietnamese", "Vietnamese"),
                            ("welsh", "Welsh"),
                            ("custom", "Other"),
                        ],
                        default="english",
                        max_length=100,
                    ),
                ),
                ("polyglossia_options", models.TextField(blank=True, null=True)),
                (
                    "font",
                    models.CharField(
                        choices=[
                            ("blotus", "BLotus"),
                            ("broya", "BRoya"),
                            ("iskpota", "Iskoola Pota"),
                            ("khmeros", "Khmer OS"),
                            ("notokufiarabic", "Noto Kufi Arabic"),
                            ("notonaskharabic", "Noto Naskh Arabic"),
                            ("notonaskharabicui", "Noto Naskh Arabic UI"),
                            ("notonastaliqurdu", "Noto Nastaliq Urdu"),
                            ("notonastaliqurdudraft", "Noto Nastaliq Urdu Draft"),
                            ("notosans", "Noto Sans"),
                            ("notosansarmenian", "Noto Sans Armenian"),
                            ("notosansavestan", "Noto Sans Avestan"),
                            ("notosansbalinese", "Noto Sans Balinese"),
                            ("notosansbamum", "Noto Sans Bamum"),
                            ("notosansbatak", "Noto Sans Batak"),
                            ("notosansbengali", "Noto Sans Bengali"),
                            ("notosansbengaliui", "Noto Sans Bengali UI"),
                            ("notosansbrahmi", "Noto Sans Brahmi"),
                            ("notosansbuginese", "Noto Sans Buginese"),
                            ("notosansbuhid", "Noto Sans Buhid"),
                            (
                                "notosanscanadianaboriginal",
                                "Noto Sans Canadian Aboriginal",
                            ),
                            ("notosanscarian", "Noto Sans Carian"),
                            ("notosanscham", "Noto Sans Cham"),
                            ("notosanscherokee", "Noto Sans Cherokee"),
                            ("notosanscoptic", "Noto Sans Coptic"),
                            ("notosanscuneiform", "Noto Sans Cuneiform"),
                            ("notosanscypriot", "Noto Sans Cypriot"),
                            ("notosansdeseret", "Noto Sans Deseret"),
                            ("notosansdevanagari", "Noto Sans Devanagari"),
                            ("notosansdevanagariui", "Noto Sans Devanagari UI"),
                            (
                                "notosansegyptianhieroglyphs",
                                "Noto Sans Egyptian Hieroglyphs",
                            ),
                            ("notosansethiopic", "Noto Sans Ethiopic"),
                            ("notosansgeorgian", "Noto Sans Georgian"),
                            ("notosansgothic", "Noto Sans Gothic"),
                            ("notosansgujarati", "Noto Sans Gujarati"),
                            ("notosansgujaratiui", "Noto Sans Gujarati UI"),
                            ("notosansgurmukhi", "Noto Sans Gurmukhi"),
                            ("notosansgurmukhiui", "Noto Sans Gurmukhi UI"),
                            ("notosanshanunoo", "Noto Sans Hanunoo"),
                            ("notosanshebrew", "Noto Sans Hebrew"),
                            ("notosansimperialaramaic", "Noto Sans Imperial Aramaic"),
                            (
                                "notosansinscriptionalpahlavi",
                                "Noto Sans Inscriptional Pahlavi",
                            ),
                            (
                                "notosansinscriptionalparthian",
                                "Noto Sans Inscriptional Parthian",
                            ),
                            ("notosansjapanese", "Noto Sans Japanese"),
                            ("notosansjavanese", "Noto Sans Javanese"),
                            ("notosansjp", "Noto Sans JP"),
                            ("notosanskaithi", "Noto Sans Kaithi"),
                            ("notosanskannada", "Noto Sans Kannada"),
                            ("notosanskannadaui", "Noto Sans Kannada UI"),
                            ("notosanskayahli", "Noto Sans Kayah Li"),
                            ("notosanskharoshthi", "Noto Sans Kharoshthi"),
                            ("notosanskhmer", "Noto Sans Khmer"),
                            ("notosanskhmerui", "Noto Sans Khmer UI"),
                            ("notosanskr", "Noto Sans KR"),
                            ("notosanskufiarabic", "Noto Sans Kufi Arabic"),
                            ("notosanslao", "Noto Sans Lao"),
                            ("notosanslaoui", "Noto Sans Lao UI"),
                            ("notosanslepcha", "Noto Sans Lepcha"),
                            ("notosanslimbu", "Noto Sans Limbu"),
                            ("notosanslinearb", "Noto Sans Linear B"),
                            ("notosanslisu", "Noto Sans Lisu"),
                            ("notosanslycian", "Noto Sans Lycian"),
                            ("notosanslydian", "Noto Sans Lydian"),
                            ("notosansmalayalam", "Noto Sans Malayalam"),
                            ("notosansmalayalamui", "Noto Sans Malayalam UI"),
                            ("notosansmandaic", "Noto Sans Mandaic"),
                            ("notosansmeeteimayek", "Noto Sans Meetei Mayek"),
                            ("notosansmongolian", "Noto Sans Mongolian"),
                            ("notosansmyanmar", "Noto Sans Myanmar"),
                            ("notosansmyanmarui", "Noto Sans Myanmar UI"),
                            ("notosansnewtailue", "Noto Sans New Tai Lue"),
                            ("notosansogham", "Noto Sans Ogham"),
                            ("notosansolchiki", "Noto Sans Ol Chiki"),
                            ("notosansolditalic", "Noto Sans Old Italic"),
                            ("notosansoldpersian", "Noto Sans Old Persian"),
                            ("notosansoldsoutharabian", "Noto Sans Old South Arabian"),
                            ("notosansoldturkic", "Noto Sans Old Turkic"),
                            ("notosansoriya", "Noto Sans Oriya"),
                            ("notosansoriyaui", "Noto Sans Oriya UI"),
                            ("notosansosmanya", "Noto Sans Osmanya"),
                            ("notosansphagspa", "Noto Sans Phags Pa"),
                            ("notosansphoenician", "Noto Sans Phoenician"),
                            ("notosansrejang", "Noto Sans Rejang"),
                            ("notosansrunic", "Noto Sans Runic"),
                            ("notosanssamaritan", "Noto Sans Samaritan"),
                            ("notosanssaurashtra", "Noto Sans Saurashtra"),
                            ("notosanssc", "Noto Sans SC"),
                            ("notosansshavian", "Noto Sans Shavian"),
                            ("notosanssinhala", "Noto Sans Sinhala"),
                            ("notosanssundanese", "Noto Sans Sundanese"),
                            ("notosanssylotinagri", "Noto Sans Syloti Nagri"),
                            ("notosanssyriaceastern", "Noto Sans Syriac Eastern"),
                            ("notosanssyriacestrangela", "Noto Sans Syriac Estrangela"),
                            ("notosanssyriacwestern", "Noto Sans Syriac Western"),
                            ("notosanstagalog", "Noto Sans Tagalog"),
                            ("notosanstagbanwa", "Noto Sans Tagbanwa"),
                            ("notosanstaile", "Noto Sans Tai Le"),
                            ("notosanstaitham", "Noto Sans Tai Tham"),
                            ("notosanstaiviet", "Noto Sans Tai Viet"),
                            ("notosanstamil", "Noto Sans Tamil"),
                            ("notosanstamilui", "Noto Sans Tamil UI"),
                            ("notosanstc", "Noto Sans TC"),
                            ("notosanstelugu", "Noto Sans Telugu"),
                            ("notosansteluguui", "Noto Sans Telugu UI"),
                            ("notosansthaana", "Noto Sans Thaana"),
                            ("notosansthai", "Noto Sans Thai"),
                            ("notosansthaiui", "Noto Sans Thai UI"),
                            ("notosanstibetan", "Noto Sans Tibetan"),
                            ("notosanstifinagh", "Noto Sans Tifinagh"),
                            ("notosansugaritic", "Noto Sans Ugaritic"),
                            ("notosansvai", "Noto Sans Vai"),
                            ("notosansyi", "Noto Sans Yi"),
                            ("notoserif", "Noto Serif"),
                            ("notoserifarmenian", "Noto Serif Armenian"),
                            ("notoserifgeorgian", "Noto Serif Georgian"),
                            ("notoseriflao", "Noto Serif Lao"),
                            ("notoserifthai", "Noto Serif Thai"),
                            ("thsarabun", "THSarabun"),
                        ],
                        default="notosans",
                        max_length=100,
                    ),
                ),
                ("extraheader", models.TextField(blank=True)),
                (
                    "delegation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_core.Delegation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("L", "Liked"), ("U", "Unliked")], max_length=1
                    ),
                ),
                (
                    "delegation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_core.Delegation",
                    ),
                ),
                (
                    "feedback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Feedback",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PDFNode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pdf",
                    models.FileField(
                        blank=True, upload_to=ipho_exam.models.get_file_path
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("O", "In progress"),
                            ("L", "Locked"),
                            ("S", "Submitted"),
                        ],
                        default="O",
                        max_length=1,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now=True)),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Language",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20)),
                (
                    "exam",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="ipho_exam.Exam"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_core.Student",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PrintLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("P", "Printout"), ("S", "Scan")], max_length=1
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now=True)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Document",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="e.g. Q for Question, A for Answer Sheet, G for General Instruction",
                        max_length=8,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100)),
                (
                    "position",
                    models.PositiveSmallIntegerField(
                        help_text="Sorting index inside one exam"
                    ),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Question"), (1, "Answer")], default=0
                    ),
                ),
                (
                    "feedback_active",
                    models.BooleanField(
                        default=False, help_text="Are feedbacks allowed?"
                    ),
                ),
                (
                    "working_pages",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="How many pages for working sheets"
                    ),
                ),
                (
                    "exam",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="ipho_exam.Exam"
                    ),
                ),
            ],
            options={
                "ordering": ["position", "type"],
            },
        ),
        migrations.CreateModel(
            name="StudentSubmission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "with_answer",
                    models.BooleanField(
                        default=False, help_text="Deliver also answer sheet."
                    ),
                ),
                (
                    "exam",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="ipho_exam.Exam"
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Language",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_core.Student",
                    ),
                ),
                (
                    "with_question",
                    models.BooleanField(
                        default=True, help_text="Deliver question sheets."
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TranslationImportTmp",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("content", models.TextField(blank=True)),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Language",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TranslationNode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("O", "In progress"),
                            ("L", "Locked"),
                            ("S", "Submitted"),
                        ],
                        default="O",
                        max_length=1,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now=True)),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Language",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VersionNode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                ("version", models.IntegerField()),
                (
                    "tag",
                    models.CharField(
                        blank=True,
                        help_text="leave empty to show no tag",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("P", "Proposal"),
                            ("S", "Staged"),
                            ("C", "Confirmed"),
                        ],
                        max_length=1,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now=True)),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Language",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ipho_exam.Question",
                    ),
                ),
            ],
            options={
                "ordering": ["-version", "-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="CompiledFigure",
            fields=[
                (
                    "figure_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="ipho_exam.Figure",
                    ),
                ),
                ("content", models.TextField(blank=True)),
                ("params", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("ipho_exam.figure",),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("base_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="RawFigure",
            fields=[
                (
                    "figure_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="ipho_exam.Figure",
                    ),
                ),
                ("content", models.BinaryField()),
                ("filetype", models.CharField(max_length=4)),
            ],
            options={
                "abstract": False,
            },
            bases=("ipho_exam.figure",),
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("base_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="pdfnode",
            name="question",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="ipho_exam.Question"
            ),
        ),
        migrations.AddField(
            model_name="figure",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_ipho_exam.figure_set+",
                to="contenttypes.ContentType",
            ),
        ),
        migrations.AddField(
            model_name="feedback",
            name="question",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="ipho_exam.Question"
            ),
        ),
        migrations.AddField(
            model_name="document",
            name="exam",
            field=models.ForeignKey(
                help_text="Exam",
                on_delete=django.db.models.deletion.CASCADE,
                to="ipho_exam.Exam",
            ),
        ),
        migrations.AddField(
            model_name="document",
            name="student",
            field=models.ForeignKey(
                help_text="Student",
                on_delete=django.db.models.deletion.CASCADE,
                to="ipho_core.Student",
            ),
        ),
        migrations.AddField(
            model_name="attributechange",
            name="node",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="ipho_exam.TranslationNode",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="versionnode",
            unique_together={("question", "language", "version")},
        ),
        migrations.AlterIndexTogether(
            name="versionnode",
            index_together={("question", "language", "version")},
        ),
        migrations.AlterUniqueTogether(
            name="translationnode",
            unique_together={("question", "language")},
        ),
        migrations.AlterIndexTogether(
            name="translationnode",
            index_together={("question", "language")},
        ),
        migrations.AlterUniqueTogether(
            name="studentsubmission",
            unique_together={("student", "exam", "language")},
        ),
        migrations.AlterIndexTogether(
            name="studentsubmission",
            index_together={("student", "exam", "language")},
        ),
        migrations.AlterUniqueTogether(
            name="place",
            unique_together={("student", "exam")},
        ),
        migrations.AlterIndexTogether(
            name="place",
            index_together={("student", "exam")},
        ),
        migrations.AlterUniqueTogether(
            name="pdfnode",
            unique_together={("question", "language")},
        ),
        migrations.AlterIndexTogether(
            name="pdfnode",
            index_together={("question", "language")},
        ),
        migrations.AlterUniqueTogether(
            name="like",
            unique_together={("delegation", "feedback")},
        ),
        migrations.AlterIndexTogether(
            name="like",
            index_together={("delegation", "feedback")},
        ),
        migrations.AlterUniqueTogether(
            name="language",
            unique_together={("name", "delegation")},
        ),
        migrations.AlterIndexTogether(
            name="language",
            index_together={("name", "delegation")},
        ),
        migrations.AlterUniqueTogether(
            name="examaction",
            unique_together={("exam", "delegation", "action")},
        ),
        migrations.AlterIndexTogether(
            name="examaction",
            index_together={("exam", "delegation", "action")},
        ),
        migrations.AlterUniqueTogether(
            name="document",
            unique_together={("exam", "student", "position")},
        ),
        migrations.AlterIndexTogether(
            name="document",
            index_together={("exam", "student", "position")},
        ),
        migrations.AddField(
            model_name="feedback",
            name="org_comment",
            field=models.TextField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="feedback",
            name="qml_id",
            field=models.CharField(blank=True, default=None, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name="feedback",
            name="status",
            field=models.CharField(
                choices=[
                    ("S", "Submitted"),
                    ("V", "Scheduled for voting"),
                    ("I", "Implemented"),
                    ("T", "Settled after voting"),
                    ("W", "Withdrawn"),
                ],
                default="S",
                max_length=1,
            ),
        ),
        migrations.CreateModel(
            name="CachedAutoTranslation",
            fields=[
                (
                    "source_and_lang_hash",
                    models.CharField(max_length=32, primary_key=True, serialize=False),
                ),
                ("source_length", models.IntegerField()),
                ("source_lang", models.CharField(max_length=5)),
                ("target_lang", models.CharField(max_length=5)),
                ("target_text", models.TextField(blank=True)),
                ("hits", models.IntegerField(default=1)),
            ],
        ),
        migrations.AddField(
            model_name="exam",
            name="show_delegation_submissions",
            field=models.BooleanField(
                default=False, help_text="Show submissions of the delegation"
            ),
        ),
    ]
